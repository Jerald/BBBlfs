{"name":"Bbblfs","tagline":"Flash your BeagleBone Black via USB","body":"BBBlfs\r\n======\r\n[![Build Status](https://travis-ci.org/ungureanuvladvictor/BBBlfs.svg?branch=master)](https://travis-ci.org/ungureanuvladvictor/BBBlfs)\r\n\r\nBeagle Bone Black Linux Flash System\r\n\r\nThis project provides a way to flash a BeagleBone Black via USB from a Linux machine. The project was developed during Google Summer of Code '13.\r\n\r\n\r\nBuild\r\n----------\r\n```\r\nsudo apt-get install libusb-1.0-0-dev\r\n./autogen.sh\r\n./configure\r\nmake\r\n```\r\n\r\n\r\nUsage\r\n-----------\r\nPress the S2 button on the BeagleBone Black and apply power to the board. The board should start now into USB boot mode.\r\n\r\nConnect the board to the host PC. The kernel should now identify your board as an RNDIS interface. Be sure you do not have any BOOTP servers on your network.\r\n\r\nGo to bin/ and execute ```flash_script.sh``` It needs the flashing image as argument to be provided.\r\n\r\nFor now only .xz compressed images are supported.\r\n\r\n```sudo ./flash_script.sh  [ debian | ubuntu | image.xz ]```\r\n\r\n* debian and ubuntu will use tarball from armhf.com website\r\n\r\nIf there are bugs please feel free to contact me.\r\n\r\n\r\n\r\nHow to build the binary blobs\r\n--------------------------------\r\n\r\nThe full system works as follow:\r\n\r\n* The AM335x ROM when in USB boot mode exposes a RNDIS interface to the PC and waits to TFTP a binary blob that it executes. That binary blob is the SPL\r\n* Once the SPL runs it applies the same proceure as the ROM and TFTPs U-Boot\r\n* Again U-Boot applies the same thinking and TFTPs a FIT(flatten image tree) which includes a Kernel, Ramdisk and the DTB\r\n* U-Boot runs this FIT and boots the Kernel\r\n* When the kernel starts the init script exports the eMMC using the g_mass_storage kernel module as an USB stick to the Linux so it can be flashed\r\n\r\n\r\n## Building U-Boot for USB booting\r\n* Grab the latest U-Boot sources from [git://git.denx.de/u-boot.git](git://git.denx.de/u-boot.git)\r\n* Checkout commit id 524123a70761110c5cf3ccc5f52f6d4da071b959\r\n* Install your favourite cross-compiler, I am using arm-linux-gnueabihf-\r\n* Apply this patch to U-Boot sources [https://raw.githubusercontent.com/ungureanuvladvictor/BBBlfs/master/tools/USB_FLash.patch](https://raw.githubusercontent.com/ungureanuvladvictor/BBBlfs/master/tools/USB_FLash.patch )\r\n\r\n```bash\r\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- am335x_evm_usbspl_defconfig\r\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-\r\n```\r\nNow you have u-boot.img which is the uboot binary and spl/u-boot-spl.bin which is the spl binary\r\n\r\n\r\n## Building the Kernel\r\n* Grab the latest from [https://github.com/beagleboard/kernel](https://github.com/beagleboard/kernel)\r\n```bash\r\ngit checkout 3.14\r\n./patch.sh\r\ncp configs/beaglebone kernel/arch/arm/configs/beaglebone_defconfig\r\nwget http://arago-project.org/git/projects/?p=am33x-cm3.git\\;a=blob_plain\\;f=bin/am335x-pm-firmware.bin\\;hb=HEAD -O kernel/firmware/am335x-pm-firmware.bin\r\ncd kernel\r\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- beaglebone_defconfig -j4\r\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- zImage dtbs modules -j4\r\n```\r\n\r\n* After compilation you have in arch/arm/boot/ the zImage\r\n\r\n\r\n## Building the ramdisk\r\n\r\n* Our initramfs will be built around BusyBox. First we create the basic folder structure.\r\n```bash\r\nmkdir initramfs\r\nmkdir -p initramfs/{bin,sbin,etc,proc,sys}\r\ncd initramfs\r\nwget -O init https://raw.githubusercontent.com/ungureanuvladvictor/BBBlfs/master/tools/init\r\nchmod +x init\r\n```\r\n* Now we need to cross-compile BusyBox for our ARM architecture\r\n```bash\r\ngit clone git://git.busybox.net/busybox\r\ncd busybox\r\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- defconfig\r\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig\r\n```\r\n* Now here we need to compile busybox as a static binary: Busybox Settings --> Build Options --> Build Busybox as a static binary (no shared libs)  -  Enable this option by pressing \"Y\"\r\n```bash\r\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j4\r\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- install CONFIG_PREFIX=/path/to/initramfs\r\n```\r\n* Now we need to install the kernel modules in our initramfs\r\n```bash\r\ncd /path/to/kernel/sources\r\nmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- modules_install INSTALL_MOD_PATH=/path/to/initramfs\r\n```\r\n\r\n\r\n## Packing things up\r\n\r\n* Now we need to put our initramfs in a .gz archive that the kernel knows how to process\r\n```bash\r\nmkdir maker\r\ncd /path/to/initramfs\r\nfind . | cpio -H newc -o > ../initramfs.cpio\r\ncd .. && cat initramfs.cpio | gzip > initramfs.gz\r\nmv initramfs.gz /path/to/maker/folder/ramdisk.cpio.gz\r\n```\r\n* Now we need to pack all things in a FIT image. In order to do so we need some additional packages installed, namely the mkimage and dtc compiler.\r\n```bash\r\nsudo apt-get update\r\nsudo apt-get install u-boot-tools device-tree-compiler\r\ncd /path/to/maker/folder\r\nwget -O maker.its https://raw.githubusercontent.com/ungureanuvladvictor/BBBlfs/master/tools/maker.its\r\ncp /path/to/kernel/arch/arm/boot/zImage .\r\ncp /path/to/kernel/arch/arm/boot/dts/am335x-boneblack.dtb .\r\nmkimage -f maker.its FIT\r\n```\r\n* At this point we have all things put into place. You need to copy the binary blobs in the bin/ folder and run ```flash_script.sh```\r\n\r\n#Contact\r\nvvu@vdev.ro\r\n\r\nvvu on #beagle, #beagle-gsoc\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}